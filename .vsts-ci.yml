variables:
  Build.Repository.Clean: true
  _TargetFramework: netcoreapp2.0
  _HelixType: build/product
  _HelixSource: pr/StephenBonikowsky/wcf/$(Build.SourceBranch)
  _WcfServiceUri: wcfcoresrv2.cloudapp.net/WcfService
  _UpdateService: false
  _enableTelemetry: true

trigger:
- master

# Three phases for each of the three OSes we want to run on
phases:
- template: /eng/common/templates/phases/base.yml
  parameters:
    agentOs: Windows_NT
    name: Windows_NT
    enableTelemetry: $(_enableTelemetry)
    queue:
      name: Hosted VS2017
      parallel: 99
      matrix:
        debug_selfhosted:
          _args: -buildArch=x64 -Debug
          _testargs: -outerloop
          _UpdateService: false
        release_iishosted:
          _args: -buildArch=x64 -Release
          _testargs: -outerloop -- /p:ServiceUri=$(_WcfServiceUri)1 /p:SSL_Available=true /p:Client_Certificate_Installed=true /p:Root_Certificate_Installed=true
          _UpdateService: true
    steps:
    - template: /eng/common/templates/steps/UpdatePRService.yml
      parameters:
        wcfPRServiceId: 1
    - script: build.cmd $(_args)
      displayName: Build
      condition: succeeded()
    - script: build-tests.cmd $(_args) $(_testargs)
      displayName: Build_Test
      condition: succeeded()
- template: /eng/common/templates/phases/base.yml
  parameters:
    agentOs: MacOS
    name: OSX
    enableTelemetry: $(_enableTelemetry)
    queue:
      name: Hosted macOS
      parallel: 99
      matrix:
        debug_selfhosted:
          _args: -buildArch=x64 -debug
          _testargs: -outerloop -- /p:ServiceUri=wcfcoresrv5.cloudapp.net /p:SSL_Available=true /p:Client_Certificate_Installed=true /p:Root_Certificate_Installed=true
          _UpdateService: false
        release_iishosted:
          _args: -release
          _testargs: -outerloop -- /p:ServiceUri=$(_WcfServiceUri)2 /p:SSL_Available=true /p:Client_Certificate_Installed=true /p:Root_Certificate_Installed=true
          _UpdateService: true
    steps:
    - task: DotNetCoreInstaller@0
      inputs:
        version: 2.1.403
    - template: /eng/common/templates/steps/UpdatePRService.yml
      parameters:
        wcfPRServiceId: 2
    - script: ./sync.sh -p -- /p:ArchGroup=x64
      displayName: Sync.sh
      condition: succeeded()
    - script: ./eng/dotnet-install.sh --channel LTS
      displayName: dotnet-install.sh
      condition: succeeded()
    - script: ./eng/install-native-dependencies.sh OSX
      displayName: Install native dependencies
      condition: succeeded()
    - script: ./build.sh $(_args)
      displayName: Build.sh
      condition: succeeded()
    - script: ./build-tests.sh $(_args) $(_testargs)
      displayName: Build_Test.sh
      condition: succeeded()
- template: /eng/common/templates/phases/base.yml
  parameters:
    agentOs: Ubuntu
    name: Linux
    enableTelemetry: $(_enableTelemetry)
    queue:
      name: Hosted Ubuntu 1604
      parallel: 99
      matrix:
        debug_selfhosted:
          _args: -buildArch=x64 -debug
          _testargs: -outerloop -- /p:ServiceUri=wcfcoresrv5.cloudapp.net /p:SSL_Available=true /p:Client_Certificate_Installed=true /p:Root_Certificate_Installed=true
          _UpdateService: false
        release_iishosted:
          _args: -release
          _testargs: -outerloop -- /p:ServiceUri=$(_WcfServiceUri)2 /p:SSL_Available=true /p:Client_Certificate_Installed=true /p:Root_Certificate_Installed=true
          _UpdateService: true
    steps:
    - task: DotNetCoreInstaller@0
      inputs:
        version: 2.1.403
    - template: /eng/common/templates/steps/UpdatePRService.yml
      parameters:
        wcfPRServiceId: 2
    - script: ./sync.sh -p -- /p:ArchGroup=x64
      displayName: Sync.sh
      condition: succeeded()
    - script: ./eng/dotnet-install.sh --channel LTS
      displayName: dotnet-install.sh
      condition: succeeded()
    - script: ./eng/install-native-dependencies.sh Linux
      displayName: Install native dependencies
      condition: succeeded()
    - script: ./build.sh $(_args)
      displayName: Build.sh
      condition: succeeded()
    - script: ./build-tests.sh $(_args) $(_testargs)
      displayName: Build_Test.sh
      condition: succeeded()
