<Project>
  <PropertyGroup>
    <GenerateAssemblyInfo Condition="'$(GenerateAssemblyInfo)'==''">true</GenerateAssemblyInfo>
  </PropertyGroup>

  <PropertyGroup Condition="'$(GenerateAssemblyInfo)'=='true'">
    <AssemblyInfoFile Condition="'$(MSBuildProjectExtension)' == '.csproj'">$(IntermediateOutputPath)_AssemblyInfo.cs</AssemblyInfoFile>
  </PropertyGroup>

  <PropertyGroup>
    <!-- wcf has never generated these attributes so don't let the SDK generate them -->
    <GenerateAssemblyConfigurationAttribute>false</GenerateAssemblyConfigurationAttribute>
    <GenerateNeutralResourcesLanguageAttribute>false</GenerateNeutralResourcesLanguageAttribute>

    <!-- wcf has always added a description set to assembly name so include that here -->
    <Description Condition="'$(Description)' == ''">$(AssemblyName)</Description>

    <!-- Use the .NET Core product branding version for informational version description -->
    <InformationalVersion>$(ProductVersion)</InformationalVersion>
    <InformationalVersion Condition="'$(VersionSuffix)' != ''">$(InformationalVersion)-$(VersionSuffix)</InformationalVersion>
  </PropertyGroup>

  <!-- Assembly metadata indicating that an assembly is a framework (as opposed to user) assembly:
       Test projects need to not have this because of the way "IsFrameworkAssembly" APIs work to check this. -->
  <!--TODO:ARCADE Make sure all test projects set IsTestProject to true-->
  <ItemGroup Condition="'$(IsTestProject)' != 'true'" >
    <AssemblyMetadata Include=".NETFrameworkAssembly">
      <Value></Value>
    </AssemblyMetadata>
    <AssemblyMetadata Include="Serviceable">
      <Value>True</Value>
    </AssemblyMetadata>
    <AssemblyMetadata Include="PreferInbox">
      <Value>True</Value>
    </AssemblyMetadata>
  </ItemGroup>
  <!--TODO ARCADE in the CoreFx version there is a depends on, investigate if this is necessary.-->
  <Target Name="_ComputeAssemblyInfoAttributes"
          BeforeTargets="GetAssemblyAttributes">
    <ItemGroup>
      <AssemblyAttribute Include="System.Reflection.AssemblyDefaultAliasAttribute">
        <_Parameter1>$(AssemblyName)</_Parameter1>
      </AssemblyAttribute>

      <AssemblyAttribute Include="System.Reflection.AssemblyMetadata"
                         Condition="'$(SkipFrameworkAssemblyMetadata)' != 'true' and '@(AssemblyMetadata)' != ''">
        <_Parameter1>%(AssemblyMetadata.Identity)</_Parameter1>
        <_Parameter2>%(AssemblyMetadata.Value)</_Parameter2>
      </AssemblyAttribute>
    </ItemGroup>
  </Target>

  <!-- Work around https://github.com/Microsoft/msbuild/issues/3412 by writing the non-string assembly attributes manually -->
  <Target Name="_WriteNonStringAssemblyInfoAttributes"
          AfterTargets="CoreGenerateAssemblyInfo"
          Inputs="$(MSBuildProjectFile)"
          Outputs="$(AssemblyInfoFile)">

    <ItemGroup Condition="'$(MSBuildProjectExtension)' == '.csproj'">
      <AssemblyInfoLines Condition="'$(CLSCompliant)'=='true'" Include="[assembly:System.CLSCompliant(true)]" />
    </ItemGroup>

    <WriteLinesToFile File="$(AssemblyInfoFile)"
                      Lines="@(AssemblyInfoLines)"
                      Condition="'@(AssemblyInfoLines)' != ''"
                      Overwrite="true" />

    <ItemGroup Condition="'@(AssemblyInfoLines)' != ''">
      <Compile Include="$(AssemblyInfoFile)" />
      <FileWrites Include="$(AssemblyInfoFile)" />
    </ItemGroup>
  </Target>
</Project>
