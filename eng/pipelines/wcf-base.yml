parameters:
  # Required: TargetOS value to know what script commands to use
  # Accepted values:
  # - Windows_NT
  # - Linux
  # - OSX
  targetOS: ''

  # Required: A collection of jobs to run - https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=vsts&tabs=schema#job
  jobs: []

  # Required: value to specify if the job is comming from an official build to run extra steps and sign binaries
  #   Default: false
  isOfficialBuild: false

  # EACH JOB SHOULD INCLUDE THE FOLLOWING PROPERTIES (ASIDE FROM THE REQUIRED ONES IN THE JOB SCHEMA)

  # Required: as part of the strategy matrix, the following variables should be defined
  #     _BuildConfig: Debug | Release
  #     _helixQueues: Windows.Amd64 (Only needed if submitToHelix -> true.) -- Queues should be separated by + if multiple.

  # Required: submitToHelix -> Boolean -> Value to know if it should submit tests payloads to helix.

  # Optional: buildScriptPrefix -> String -> string to append to Unix build script.
  #   buildScriptPrefix: 'HOME=/home/ ' -> 'HOME=/home/ ./build.sh ...'

  # Optional: buildExtraArguments -> String -> string to append at the end of the build arguments
  #   buildExtraArguments: /p:RuntimeOS=win10 -> 'build.cmd ... /p:RuntimeOS=win10'

  # Optional: customBuildSteps -> Array -> list of steps to run instead of the common build steps.
  #   customBuildSteps:
  #     - script: echo Hello World
  #       displayName: MyScript

  # Optional: preBuildSteps -> Array -> list of steps to be executed before common build steps.
  # In example, to install build dependencies, or setup an environment.
  #   preBuildSteps:
  #     - script: brew install cmake
  #       displayName: Install Cmake

  # timeoutInMinutes: if a job doesn't define it, we will default it to 150 minutes

jobs:
  - ${{ each job in parameters.jobs }}:
    - template: ../common/templates/job/job.yml
      parameters:
        variables:

        # pass along job variables
        - ${{ each variable in job.variables }}:
          - ${{ if ne(variable.name, '') }}:
            - name: ${{ variable.name }}
              value: ${{ variable.value }}
          - ${{ if ne(variable.group, '') }}:
            - group: ${{ variable.group }}

          # handle key-value variable syntax.
          # example:
          # - [key]: [value]
          - ${{ if and(eq(variable.name, ''), eq(variable.group, '')) }}:
            - ${{ each pair in variable }}:
              - name: ${{ pair.key }}
                value: ${{ pair.value }}

        - _msbuildCommonParameters: ''
        - _archiveTestsParameter: ''

        - ${{ if eq(parameters.isOfficialBuild, 'true') }}:
          - _msbuildCommonParameters: /p:OfficialBuildId=$(Build.BuildNumber)
          - _dotnetFeedUrl: https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json
          #- group: DotNet-Internal-Tools-Feed <-- Not sure if I need access to this group.
          - group: DotNet-Blob-Feed

        - ${{ if eq(job.submitToHelix, 'true') }}:
          - ${{ if eq(parameters.isOfficialBuild, 'true') }}:
            - group: DotNet-HelixApi-Access

        - _serviceUri: wcfcoresrv5.cloudapp.net/wcftestservice1

        - ${{ if eq(parameters.isOfficialBuild, 'false') }}:
          - _serviceUri: wcfcoresrv2.cloudapp.net/WcfService

        - _testArgs: /p:ServiceUri=$(_serviceUri) /p:Root_Certificate_Installed=true /p:Client_Certificate_Installed=true /p:SSL_Available=true
        - _args: -preparemachine -configuration $(_BuildConfig) /p:Test=$(_unitTests) /p:IntegrationTest=$(_integrationTests) /p:Sign=$(_sign) /p:Pack=$(_pack) /p:Publish=$(_publish)
        - _commonArguments: $(_args)

        # Windows variables
        - ${{ if eq(parameters.targetOS, 'Windows_NT') }}:
          - _buildScript: eng\common\cibuild.cmd

        # Non-Windows variables
        - ${{ if ne(parameters.targetOS, 'Windows_NT') }}:
          - _buildScript: ./eng/common/cibuild.sh

        # Send to Helix variables
        - ${{ if eq(job.submitToHelix, 'true') }}:
          - _helixSource: ${{ parameters.repoName }}/$(Build.SourceBranch)
          - _helixType: build/product
          - _xUnitPublishTargetFramework: netcoreapp3.0
          - _xUnitRuntimeTargetFramework: netcoreapp2.0
          - _xUnitRunnerVersion: 2.4.1
          - _dotNetCliPackageType: sdk
          - _dotNetCliVersion: 3.0.100-preview-010024 #must be same version as tools dotnet version in the global.json
          - _xUnitWorkItemTimeout: '00:10:00'

        # pass along job properties
        ${{ each property in job }}:
          ${{ if and(ne(property.key, 'job'), ne(property.key, 'variables')) }}:
            ${{ property.key }}: ${{ property.value }}

        # enable helix telemetry -- we only send telemetry during official builds
        enableTelemetry: ${{ parameters.isOfficialBuild }}
        helixRepo: dotnet/wcf

        name: ${{ job.job }}
        workspace:
          clean: all

        # enabling publish build artifacts, will publish all build logs under /artifacts/log/
        enablePublishBuildArtifacts: true

        ${{ if eq(job.timeoutInMinutes, '') }}:
          timeoutInMinutes: 45

        steps:
          - ${{ if ne(job.preBuildSteps[0], '') }}:
            - ${{ job.preBuildSteps }}

          - ${{ if eq(parameters.isOfficialBuild, 'false') }}:
            - template: ../UpdatePRService.yml
              parameters:
                wcfPRServiceId: 1
            - script: $(_buildScript)
                $(_commonArguments)
                $(_testArgs)

          - ${{ if eq(parameters.isOfficialBuild, 'true') }}:
            - script: $(_buildScript)
                $(_commonArguments)
                $(_msbuildCommonParameters)
                $(_testArgs)

          - ${{ if ne(job.customBuildSteps[0], '') }}:
            - ${{ job.customBuildSteps }}

          - ${{ if eq(job.submitToHelix, 'true') }}:
            - ${{ if eq(parameters.isOfficialBuild, 'true') }}:
              - template: ../steps/send-to-helix.yml
                parameters:
                  HelixSource: $(_helixSource)
                  HelixType: $(_helixType)
                  HelixTargetQueues: $(_helixQueues)
                  XUnitProjects: $(_xUnitAllTestProjects)
                  XUnitPublishTargetFramework: $(_xUnitPublishTargetFramework)
                  XUnitRuntimeTargetFramework: $(_xUnitRuntimeTargetFramework)
                  XUnitRunnerVersion: $(_xUnitRunnerVersion)
                  IncludeDotNetCli: true
                  DotNetCliPackageType: $(_dotNetCliPackageType)
                  DotNetCliVersion: $(_dotNetCliVersion)
                  EnableXUnitReporter: true
                  XUnitWorkItemTimeout: $(_xUnitWorkItemTimeout)

                  ${{ if eq(parameters.isOfficialBuild, 'true') }}:
                    WaitForWorkItemCompletion: false
                    HelixAccessToken: $(HelixApiAccessToken)

                  ${{ if eq(parameters.isOfficialBuild, 'false') }}:
                    WaitForWorkItemCompletion: true
                    HelixAccessToken: ''
                    Creator: dotnet-wcf
